(cl:in-package #:clim-tests)

(def-suite* :mcclim.postscript
  :in :mcclim)

(test postscript.smoke
  (let ((psfilename "/tmp/clim-postscript-test.ps")
        (epsfilename "/tmp/clim-postscript-test.eps"))
    (unwind-protect
         (progn
           (with-open-file (s psfilename :direction :output :if-exists :supersede)
             (with-output-to-postscript-stream (s s :device-type :a4)
               (draw-text* s "Hello, World!" 20 20)))
           (with-open-file (s psfilename :direction :input)
             (let ((first-line (read-line s)))
               (is (eql 11 (mismatch first-line "%!PS-Adobe-")))
               (is (eq nil (position #\Space first-line)))
               (do ((line (read-line s) (read-line s)))
                   ((not (eql (mismatch line "%%") 2))
                    (error "Failed to find bounding box"))
                 (when (eql (mismatch line "%%BoundingBox: ") 15)
                   (with-input-from-string (string line :start 15)
                     (let ((llx (read string))
                           (lly (read string))
                           (urx (read string))
                           (ury (read string)))
                       (is-true (numberp llx))
                       (is-true (numberp lly))
                       (is-true (numberp urx))
                       (is-true (numberp ury))
                       (return t)))))))
           (with-open-file (s epsfilename :direction :output :if-exists :supersede)
             (with-output-to-postscript-stream (s s :device-type :eps)
               (draw-rectangle* s 1 1 19 21)))
           (with-open-file (s epsfilename :direction :input)
             (let ((first-line (read-line s)))
               (is (eql 11 (mismatch first-line "%!PS-Adobe-")))
               (is-true (search "EPSF" first-line))
               (do ((line (read-line s) (read-line s)))
                   ((not (eql (mismatch line "%%") 2))
                    (error "Failed to find bounding box"))
                 (when (eql (mismatch line "%%BoundingBox: ") 15)
                   (with-input-from-string (string line :start 15)
                     (let ((llx (read string))
                           (lly (read string))
                           (urx (read string))
                           (ury (read string)))
                       (is-true (numberp llx))
                       (is-true (numberp lly))
                       (is-true (numberp urx))
                       (is-true (numberp ury))
                       ;; our EPS files have lower bounds of 0.
                       (is (= 0 llx))
                       (is (= 0 lly))
                       (is (>= 20 (- urx llx) 18))
                       (is (>= 22 (- ury lly) 20))
                       (return t))))))))
      (ignore-errors (delete-file psfilename))
      (ignore-errors (delete-file epsfilename)))))
